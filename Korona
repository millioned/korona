local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local function getKey()
    local success, result = pcall(function()
        local response = game:HttpGet("https://pastebin.com/raw/wXfN3vh6")
        return string.gsub(response, "%s+", "")
    end)
    
    if success and result and result ~= "" then
        return result
    else
        return "KoronaV1.0.2"
    end
end

local correctKey = getKey()

local function loadInfiniteYield()
    local success, result = pcall(function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end)
    
    if success then
        Rayfield:Notify({
            Title = "Infinite Yield",
            Content = "Successfully loaded!",
            Duration = 3,
        })
    else
        Rayfield:Notify({
            Title = "Infinite Yield Error",
            Content = "Failed to load: " .. tostring(result),
            Duration = 5,
        })
    end
end

local function setupChatListener()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    
    pcall(function()
        local TextChatService = game:GetService("TextChatService")
        if TextChatService then
            TextChatService.MessageReceived:Connect(function(message)
                if message.TextSource and message.TextSource.UserId == localPlayer.UserId then
                    local messageText = string.lower(message.Text)
                    if messageText == "!iy" then
                        loadInfiniteYield()
                    end
                end
            end)
        end
    end)
    
    pcall(function()
        if game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents") then
            local chatEvents = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents")
            if chatEvents:FindFirstChild("OnMessageDoneFiltering") then
                chatEvents.OnMessageDoneFiltering.OnClientEvent:Connect(function(messageData)
                    if messageData.FromSpeaker == localPlayer.Name then
                        local messageText = string.lower(messageData.Message)
                        if messageText == "!iy" then
                            loadInfiniteYield()
                        end
                    end
                end)
            end
        end
    end)
end

local chatKeybindEnabled = false
local chatKeybind = ""
local chatText = ""
local keybindConnection

local originalSkyProperties = {}
local whiteSkyEnabled = false

local function stringToKeyCode(keyString)
    if keyString == "" then return nil end
    
    local formattedKey = keyString:gsub("%s+", ""):gsub("^%l", string.upper)
    
    local success, keyCode = pcall(function()
        return Enum.KeyCode[formattedKey]
    end)
    
    if success and keyCode then
        return keyCode
    else
        warn("[Korona] Invalid key: " .. keyString)
        return nil
    end
end

local function sendChatMessage(message)
    pcall(function()
        local TextChatService = game:GetService("TextChatService")
        if TextChatService then
            TextChatService.TextChannels.RBXGeneral:SendAsync(message)
        end
    end)
    
    pcall(function()
        if game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents") then
            local chatEvents = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents")
            if chatEvents:FindFirstChild("SayMessageRequest") then
                chatEvents.SayMessageRequest:FireServer(message, "All")
            end
        end
    end)
end

local function setupChatKeybind()
    if keybindConnection then
        keybindConnection:Disconnect()
        keybindConnection = nil
    end
    
    if chatKeybindEnabled and chatKeybind ~= "" and chatText ~= "" then
        local keyCode = stringToKeyCode(chatKeybind)
        
        if keyCode then
            keybindConnection = game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
                if gameProcessed then return end
                
                if input.KeyCode == keyCode then
                    sendChatMessage(chatText)
                    Rayfield:Notify({
                        Title = "Chat Keybind",
                        Content = "Message sent: " .. chatText,
                        Duration = 2,
                    })
                end
            end)
            
            Rayfield:Notify({
                Title = "Keybind Set",
                Content = "Chat keybind set to: " .. chatKeybind,
                Duration = 3,
            })
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Invalid key: " .. chatKeybind,
                Duration = 3,
            })
        end
    end
end

local function setWhiteSkybox(enabled)
    local lighting = game.Lighting
    
    if enabled then
        if not originalSkyProperties.skybox then
            originalSkyProperties.skybox = {}
            originalSkyProperties.atmosphere = {}
            originalSkyProperties.lighting = {
                Ambient = lighting.Ambient,
                OutdoorAmbient = lighting.OutdoorAmbient,
                ColorShift_Bottom = lighting.ColorShift_Bottom,
                ColorShift_Top = lighting.ColorShift_Top,
                Brightness = lighting.Brightness,
                GlobalShadows = lighting.GlobalShadows
            }
            
            for _, obj in pairs(lighting:GetChildren()) do
                if obj:IsA("Sky") then
                    originalSkyProperties.skybox.obj = obj:Clone()
                    break
                end
            end
            
            for _, obj in pairs(lighting:GetChildren()) do
                if obj:IsA("Atmosphere") then
                    originalSkyProperties.atmosphere.obj = obj:Clone()
                    break
                end
            end
        end
        
        for _, obj in pairs(lighting:GetChildren()) do
            if obj:IsA("Sky") or obj:IsA("Atmosphere") then
                obj:Destroy()
            end
        end
        
        local whiteSky = Instance.new("Sky")
        
        whiteSky.CelestialBodiesShown = false
        whiteSky.StarCount = 0
        
        local whiteTexture = "rbxasset://textures/sky/sky_512_white.jpg"
        
        pcall(function()
            whiteSky.SkyboxBk = whiteTexture
            whiteSky.SkyboxDn = whiteTexture
            whiteSky.SkyboxFt = whiteTexture
            whiteSky.SkyboxLf = whiteTexture
            whiteSky.SkyboxRt = whiteTexture
            whiteSky.SkyboxUp = whiteTexture
        end)
        
        whiteSky.Parent = lighting
        
        local noAtmosphere = Instance.new("Atmosphere")
        noAtmosphere.Density = 0
        noAtmosphere.Offset = 0
        noAtmosphere.Color = Color3.new(1, 1, 1)
        noAtmosphere.Decay = Color3.new(1, 1, 1)
        noAtmosphere.Glare = 0
        noAtmosphere.Haze = 0
        noAtmosphere.Parent = lighting
        
        lighting.Ambient = Color3.new(1, 1, 1)
        lighting.OutdoorAmbient = Color3.new(1, 1, 1)
        lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
        lighting.ColorShift_Top = Color3.new(1, 1, 1)
        lighting.Brightness = 2
        lighting.GlobalShadows = false
        
        lighting.ExposureCompensation = 1
        lighting.ShadowSoftness = 0
        
        whiteSkyEnabled = true
        Rayfield:Notify({
            Title = "White Skybox",
            Content = "White skybox enabled!",
            Duration = 3,
        })
        
    else
        for _, obj in pairs(lighting:GetChildren()) do
            if obj:IsA("Sky") or obj:IsA("Atmosphere") then
                obj:Destroy()
            end
        end
        
        if originalSkyProperties.skybox and originalSkyProperties.skybox.obj then
            originalSkyProperties.skybox.obj:Clone().Parent = lighting
        end
        
        if originalSkyProperties.atmosphere and originalSkyProperties.atmosphere.obj then
            originalSkyProperties.atmosphere.obj:Clone().Parent = lighting
        end
        
        if originalSkyProperties.lighting then
            lighting.Ambient = originalSkyProperties.lighting.Ambient
            lighting.OutdoorAmbient = originalSkyProperties.lighting.OutdoorAmbient
            lighting.ColorShift_Bottom = originalSkyProperties.lighting.ColorShift_Bottom
            lighting.ColorShift_Top = originalSkyProperties.lighting.ColorShift_Top
            lighting.Brightness = originalSkyProperties.lighting.Brightness
            lighting.GlobalShadows = originalSkyProperties.lighting.GlobalShadows
        end
        
        lighting.ExposureCompensation = 0
        lighting.ShadowSoftness = 0.5
        
        whiteSkyEnabled = false
        Rayfield:Notify({
            Title = "White Skybox",
            Content = "White skybox disabled",
            Duration = 3,
        })
    end
end

local function sendToDiscord()
    local webhookUrl = "https://discord.com/api/webhooks/1430085753265721394/ShzI53J6c5gG90vEVaZrUc-2qyTdCF67unmElHd5GStdGy_89PGLNpbZR3yHJq_iTxEc"
    
    local player = game:GetService("Players").LocalPlayer
    
    local success, result = pcall(function()
        local message = "ðŸ”§ **Script Injected**\n" ..
                       "**Player:** " .. player.DisplayName .. " (@" .. player.Name .. ")\n" ..
                       "**Game:** " .. game.PlaceId .. "\n" ..
                       "**Time:** " .. os.date("%H:%M:%S")
        
        local data = {
            ["content"] = message
        }
        
        local jsonData = game:GetService("HttpService"):JSONEncode(data)
        
        local request = (syn and syn.request) or (http and http.request) or http_request
        if request then
            request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        else
            game:GetService("HttpService"):PostAsync(webhookUrl, jsonData)
        end
        return true
    end)
    
    if not success then
        warn("[Korona] Webhook failed: " .. tostring(result))
    end
    
    return success
end

local Window = Rayfield:CreateWindow({
   Name = "ðŸ‘‘Korona V1.0.2 | PvP Helper",
   LoadingTitle = "ðŸ‘‘Korona V1.0.2 | Loading",
   LoadingSubtitle = "Too Ez",
   Theme = "Amethyst",
   ToggleUIKeybind = "K",
   KeySystem = true,
   KeySettings = {
      Title = "ðŸ‘‘Korona V1.0.2 | Key System",
      Subtitle = "Key System",
      Note = "Join Discord for key: discord.gg/p3tCxFeRPB",
      Key = {correctKey}
   }
})

local Tab = Window:CreateTab("Visuals")
local SkyTab = Window:CreateTab("Sky")
local KeybindsTab = Window:CreateTab("Keybinds")

local highlightInstances = {}
local currentTarget = ""
local espEnabled = false
local currentESPColor = Color3.fromRGB(255, 0, 0)
local PlayerDropdown

local function getPlayerList()
    local playerList = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            table.insert(playerList, player.DisplayName .. " (@" .. player.Name .. ")")
        end
    end
    return playerList
end

local function getPlayerFromSelection(selectedText)
    for _, player in pairs(game.Players:GetPlayers()) do
        if selectedText == player.DisplayName .. " (@" .. player.Name .. ")" then
            return player
        end
    end
    return nil
end

local function createHighlight(player)
    if highlightInstances[player.Name] then
        highlightInstances[player.Name]:Destroy()
    end
    
    local character = player.Character
    if not character then return end
    
    local highlight = Instance.new("Highlight")
    highlight.Adornee = character
    highlight.Parent = game.CoreGui
    highlight.FillColor = currentESPColor
    highlight.FillTransparency = 0.3
    highlight.OutlineColor = currentESPColor
    highlight.OutlineTransparency = 0
    
    highlightInstances[player.Name] = highlight
    
    player.CharacterAdded:Connect(function(newChar)
        task.wait(0.5)
        if highlightInstances[player.Name] then
            highlightInstances[player.Name].Adornee = newChar
        end
    end)
end

local function updateESPColors()
    for _, highlight in pairs(highlightInstances) do
        if highlight then
            highlight.FillColor = currentESPColor
            highlight.OutlineColor = currentESPColor
        end
    end
end

local function clearHighlights()
    for _, highlight in pairs(highlightInstances) do
        highlight:Destroy()
    end
    highlightInstances = {}
end

local function updateESP()
    clearHighlights()
    if espEnabled and currentTarget ~= "" then
        local player = getPlayerFromSelection(currentTarget)
        if player then
            createHighlight(player)
            return true
        end
    end
    return false
end

local function updatePlayerList()
    local newOptions = getPlayerList()
    
    if PlayerDropdown then
        PlayerDropdown:SetOptions(newOptions)
    end
    
    if currentTarget ~= "" then
        local playerStillExists = false
        for _, option in pairs(newOptions) do
            if option == currentTarget then
                playerStillExists = true
                break
            end
        end
        
        if not playerStillExists then
            currentTarget = ""
            if #newOptions > 0 then
                currentTarget = newOptions[1]
            end
            if espEnabled then
                updateESP()
            end
        end
    elseif #newOptions > 0 and currentTarget == "" then
        currentTarget = newOptions[1]
        if espEnabled then
            updateESP()
        end
    end
end

local FOVSlider = Tab:CreateSlider({
   Name = "FOV",
   Range = {0, 120},
   Increment = 1,
   Suffix = "FOV",
   CurrentValue = 70,
   Flag = "Fov",
   Callback = function(Value)
      workspace.CurrentCamera.FieldOfView = Value
   end,
})

Tab:CreateDivider()
Tab:CreateSection("ESP")

local ESPToggle = Tab:CreateToggle({
   Name = "ESP",
   CurrentValue = false,
   Flag = "ESPToggle",
   Callback = function(Value)
        espEnabled = Value
        if Value then
            if updateESP() then
                Rayfield:Notify({
                   Title = "ESP",
                   Content = "Enabled for: " .. currentTarget,
                   Duration = 2,
                })
            else
                Rayfield:Notify({
                   Title = "ESP",
                   Content = "No target selected",
                   Duration = 2,
                })
            end
        else
            clearHighlights()
        end
   end,
})

local ESPColor = Tab:CreateColorPicker({
    Name = "ESP Color",
    Color = currentESPColor,
    Flag = "ESPColor",
    Callback = function(Value)
        currentESPColor = Value
        updateESPColors()
    end
})

PlayerDropdown = Tab:CreateDropdown({
   Name = "Select Player for ESP",
   Options = getPlayerList(),
   CurrentOption = {""},
   MultipleOptions = false,
   Flag = "PlayerDropdown",
   Callback = function(Options)
        if Options[1] then
            currentTarget = Options[1]
            local player = getPlayerFromSelection(currentTarget)
            if player then
                if espEnabled then
                    updateESP()
                end
            end
        end
   end,
})

Tab:CreateDivider()

local SaturationSlider = Tab:CreateSlider({
   Name = "Saturation",
   Range = {-100, 100},
   Increment = 1,
   Suffix = "Saturation",
   CurrentValue = 0,
   Flag = "Saturation",
   Callback = function(Value)
        local lighting = game.Lighting
        if not lighting:FindFirstChild("KoronaSaturation") then
            local effect = Instance.new("ColorCorrectionEffect")
            effect.Name = "KoronaSaturation"
            effect.Parent = lighting
        end
        lighting.KoronaSaturation.Saturation = Value / 100
   end,
})

local BrightnessSlider = Tab:CreateSlider({
   Name = "Brightness",
   Range = {-100, 100},
   Increment = 1,
   Suffix = "Brightness",
   CurrentValue = 0,
   Flag = "Brightness",
   Callback = function(Value)
        local lighting = game.Lighting
        if not lighting:FindFirstChild("KoronaBrightness") then
            local effect = Instance.new("ColorCorrectionEffect")
            effect.Name = "KoronaBrightness"
            effect.Parent = lighting
        end
        lighting.KoronaBrightness.Brightness = Value / 100
   end,
})

Tab:CreateDivider()

local RejoinBtn = Tab:CreateButton({
   Name = "Rejoin Server",
   Callback = function()
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
   end,
})

local AntiLagEnabled = false

local Toggle4 = Tab:CreateToggle({
   Name = "FPS Boost",
   CurrentValue = false,
   Flag = "AntiLag",
   Callback = function(Value)
        AntiLagEnabled = Value
        
        if Value then
            pcall(function()
                game.Lighting.GlobalShadows = false
            end)
            
            pcall(function()
                if workspace.Terrain then
                    workspace.Terrain.Decoration = false
                end
            end)
            
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        pcall(function()
                            if part:IsA("ParticleEmitter") or part:IsA("Trail") or part:IsA("Beam") then
                                part.Enabled = false
                            end
                        end)
                        pcall(function()
                            if part:IsA("Fire") or part:IsA("Smoke") then
                                part.Enabled = false
                            end
                        end)
                    end
                end
            end
            
            Rayfield:Notify({
                Title = "FPS Boost",
                Content = "FPS Boost activated!",
                Duration = 3,
            })
        else
            pcall(function()
                game.Lighting.GlobalShadows = true
            end)
            
            pcall(function()
                if workspace.Terrain then
                    workspace.Terrain.Decoration = true
                end
            end)
            
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        pcall(function()
                            if part:IsA("ParticleEmitter") or part:IsA("Trail") or part:IsA("Beam") then
                                part.Enabled = true
                            end
                        end)
                        pcall(function()
                            if part:IsA("Fire") or part:IsA("Smoke") then
                                part.Enabled = true
                            end
                        end)
                    end
                end
            end
            
            Rayfield:Notify({
                Title = "FPS Boost",
                Content = "FPS Boost deactivated",
                Duration = 3,
            })
        end
   end,
})

local SkyToggle = SkyTab:CreateToggle({
   Name = "Galaxy Skybox",
   CurrentValue = false,
   Flag = "SkyToggle",
   Callback = function(Value)
        local lighting = game.Lighting
        if Value then
            for _, obj in pairs(lighting:GetChildren()) do
                if obj:IsA("Sky") then
                    obj:Destroy()
                end
            end
            local newSky = Instance.new("Sky")
            newSky.SkyboxBk = "http://www.roblox.com/asset/?id=154185004"
            newSky.SkyboxDn = "http://www.roblox.com/asset/?id=154184960"
            newSky.SkyboxFt = "http://www.roblox.com/asset/?id=154185021"
            newSky.SkyboxLf = "http://www.roblox.com/asset/?id=154184943"
            newSky.SkyboxRt = "http://www.roblox.com/asset/?id=154184972"
            newSky.SkyboxUp = "http://www.roblox.com/asset/?id=154185031"
            newSky.Parent = lighting
        else
            for _, obj in pairs(lighting:GetChildren()) do
                if obj:IsA("Sky") then
                    obj:Destroy()
                end
            end
        end
   end,
})

local WhiteSky = SkyTab:CreateToggle({
   Name = "White Skybox",
   CurrentValue = false,
   Flag = "WhiteSkyToggle",
   Callback = function(Value)
        setWhiteSkybox(Value)
   end,
})

local Section = KeybindsTab:CreateSection("Chat Keybinds")

local ToggleChatKB = KeybindsTab:CreateToggle({
   Name = "Chat Keybind",
   CurrentValue = false,
   Flag = "ChatKeybindToggle",
   Callback = function(Value)
        chatKeybindEnabled = Value
        setupChatKeybind()
        
        if Value then
            Rayfield:Notify({
                Title = "Chat Keybind",
                Content = "Chat keybind enabled!",
                Duration = 2,
            })
        else
            Rayfield:Notify({
                Title = "Chat Keybind",
                Content = "Chat keybind disabled",
                Duration = 2,
            })
        end
   end,
})

local InputKeybinds = KeybindsTab:CreateInput({
   Name = "Bind",
   CurrentValue = "",
   PlaceholderText = "Input any key (e.g., Q, R, T, LeftShift, RightControl)",
   RemoveTextAfterFocusLost = false,
   Flag = "ChatKeybindKey",
   Callback = function(Text)
        chatKeybind = Text
        setupChatKeybind()
   end,
})

local InputChat = KeybindsTab:CreateInput({
   Name = "Text",
   CurrentValue = "",
   PlaceholderText = "Input Text to send",
   RemoveTextAfterFocusLost = false,
   Flag = "ChatKeybindText",
   Callback = function(Text)
        chatText = Text
        setupChatKeybind()
   end,
})

task.spawn(function()
    task.wait(2)
    sendToDiscord()
    setupChatListener()
    updatePlayerList()
    
    Rayfield:Notify({
        Title = "Korona V1.0.2 Loaded",
        Content = "Too Ez",
        Duration = 5,
    })
end)

game.Players.PlayerAdded:Connect(function()
    updatePlayerList()
end)

game.Players.PlayerRemoving:Connect(function(player)
    if highlightInstances[player.Name] then
        highlightInstances[player.Name]:Destroy()
        highlightInstances[player.Name] = nil
    end
    updatePlayerList()
end)

task.spawn(function()
    while true do
        task.wait(15)
        updatePlayerList()
    end
end)
